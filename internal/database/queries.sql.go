// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (theme)
VALUES ($1)
RETURNING id, theme
`

func (q *Queries) CreateRoom(ctx context.Context, theme string) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, theme)
	var i Room
	err := row.Scan(&i.ID, &i.Theme)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE
FROM rooms
WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRoom, id)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT id, theme
FROM rooms
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, id pgtype.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.Theme)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT id, theme
FROM rooms
ORDER BY theme
`

func (q *Queries) ListRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Theme); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
